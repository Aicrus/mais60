/**
 * Script para limpar o cache do Metro Bundler
 * 
 * Este script executa a limpeza do cache do Metro Bundler para garantir
 * que as altera√ß√µes nas configura√ß√µes do supabase e polyfills sejam aplicadas.
 */

const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

console.log('üßπ Limpando cache do Metro Bundler...');

// Remove a pasta .expo na raiz do projeto
try {
  if (fs.existsSync('.expo')) {
    execSync('rm -rf .expo');
    console.log('‚úÖ Pasta .expo removida com sucesso');
  } else {
    console.log('‚ÑπÔ∏è Pasta .expo n√£o encontrada');
  }
} catch (error) {
  console.error('‚ö†Ô∏è Erro ao remover a pasta .expo:', error.message);
}

// Remove o cache tempor√°rio do metro
try {
  if (fs.existsSync('node_modules/.cache')) {
    execSync('rm -rf node_modules/.cache');
    console.log('‚úÖ Cache do Metro removido com sucesso');
  } else {
    console.log('‚ÑπÔ∏è Pasta node_modules/.cache n√£o encontrada');
  }
} catch (error) {
  console.error('‚ö†Ô∏è Erro ao remover o cache do metro:', error.message);
}

// Limpa cache do npm
try {
  execSync('npm cache clean --force', { stdio: 'inherit' });
  console.log('‚úÖ Cache do npm limpo com sucesso');
} catch (error) {
  console.error('‚ö†Ô∏è Erro ao limpar o cache do npm:', error.message);
}

// Reinstala as depend√™ncias do node-fetch
try {
  console.log('üì¶ Reinstalando o pacote @supabase/node-fetch...');
  execSync('npm uninstall @supabase/node-fetch && npm install @supabase/node-fetch --save', { stdio: 'inherit' });
  console.log('‚úÖ Pacote @supabase/node-fetch reinstalado com sucesso');
} catch (error) {
  console.error('‚ö†Ô∏è Erro ao reinstalar o pacote @supabase/node-fetch:', error.message);
}

console.log('‚ú® Limpeza de cache conclu√≠da!');
console.log('‚ö° Voc√™ pode iniciar o projeto novamente com: npm start'); 